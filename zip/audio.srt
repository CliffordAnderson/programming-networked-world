1
00:00:00,000 --> 00:00:04,000
Welcome back to Programming for a Networked World.

2
00:00:04,000 --> 00:00:08,000
Today we're going to be continuing our exploration of the chart RPC.

3
00:00:08,000 --> 00:00:11,000
But I'm going to let you in on a little secret.

4
00:00:11,000 --> 00:00:14,000
Last time we had nicely formatted data,

5
00:00:14,000 --> 00:00:18,000
a list of lists that we passed into the chart EPC, RPC,

6
00:00:18,000 --> 00:00:21,000
and then got back a good graphic.

7
00:00:21,000 --> 00:00:26,000
But your data doesn't always come nicely packaged as a list of lists.

8
00:00:26,000 --> 00:00:28,000
So what do you do then?

9
00:00:28,000 --> 00:00:32,000
We're going to learn how to apply our knowledge of how to work with lists

10
00:00:32,000 --> 00:00:36,000
so that we can format our data in a way that makes it easy to chart.

11
00:00:36,000 --> 00:00:38,000
Let's get started.

12
00:00:43,000 --> 00:00:45,000
Okay, so here's our plan.

13
00:00:45,000 --> 00:00:50,000
We're going to look at the difference between linear growth and exponential growth.

14
00:00:50,000 --> 00:00:53,000
And we're going to do that by combining two lists.

15
00:00:53,000 --> 00:00:55,000
A list of numbers, just say 1 to 15,

16
00:00:55,000 --> 00:01:00,000
and then those numbers either multiplied by 2 or squared.

17
00:01:00,000 --> 00:01:03,000
But to do this, we need to combine two lists.

18
00:01:03,000 --> 00:01:05,000
The first list of our initial numbers,

19
00:01:05,000 --> 00:01:09,000
and then the list of those numbers with the mathematical function applied to them.

20
00:01:09,000 --> 00:01:11,000
Okay, so how do we do that?

21
00:01:11,000 --> 00:01:14,000
Well, to get started, we can just make a list of lists.

22
00:01:14,000 --> 00:01:16,000
So that's easy enough.

23
00:01:16,000 --> 00:01:20,000
We'll go down to our lists here and let's take a look.

24
00:01:20,000 --> 00:01:22,000
There's numbers 1 to 10.

25
00:01:22,000 --> 00:01:24,000
If we click on that, we get 1 to 10.

26
00:01:24,000 --> 00:01:26,000
Let's just change it 1 to 15.

27
00:01:26,000 --> 00:01:28,000
There we go.

28
00:01:28,000 --> 00:01:33,000
And now how do we get the list of numbers with the function applied?

29
00:01:33,000 --> 00:01:36,000
Well, that's also fairly easy to do here

30
00:01:36,000 --> 00:01:41,000
because we can take one of these blocks here that's like square root,

31
00:01:41,000 --> 00:01:47,000
and we can drop down and we can find, for example, 2 times.

32
00:01:47,000 --> 00:01:48,000
Here we go.

33
00:01:48,000 --> 00:01:50,000
And if we pass that in,

34
00:01:50,000 --> 00:01:54,000
you see that it automatically applies that function to every item in the list.

35
00:01:54,000 --> 00:01:55,000
So that's great.

36
00:01:55,000 --> 00:01:58,000
We have now our list of numbers 1 to 15,

37
00:01:58,000 --> 00:02:01,000
and then we have the squares from 1 to 15,

38
00:02:01,000 --> 00:02:03,000
and we can do the same thing, of course,

39
00:02:03,000 --> 00:02:07,000
if we come over here and we get the multiply by 2.

40
00:02:07,000 --> 00:02:09,000
Let's do that.

41
00:02:09,000 --> 00:02:12,000
So we'll say 2 times, and then we're going to make a copy of the numbers.

42
00:02:12,000 --> 00:02:14,000
We'll duplicate that.

43
00:02:14,000 --> 00:02:20,000
And again, it produces a nice list for us of those numbers multiplied by 2.

44
00:02:20,000 --> 00:02:24,000
The trouble comes in when we want to actually combine these lists

45
00:02:24,000 --> 00:02:29,000
because, as you know, the chart RPC requires us to pass in a list of lists.

46
00:02:29,000 --> 00:02:32,000
And here we have two single lists side by side.

47
00:02:32,000 --> 00:02:34,000
So we need to combine them.

48
00:02:34,000 --> 00:02:39,000
And this operation in programming speech is called zipping the lists.

49
00:02:39,000 --> 00:02:41,000
That is taking one list and another

50
00:02:41,000 --> 00:02:45,000
and making a list out of a list or a matrix out of them.

51
00:02:45,000 --> 00:02:48,000
So how do we go about doing that?

52
00:02:48,000 --> 00:02:51,000
Well, let's develop a block that will help us.

53
00:02:51,000 --> 00:02:53,000
We're going to call this block join.

54
00:02:53,000 --> 00:02:59,000
All right, so let's just create a new block here.

55
00:02:59,000 --> 00:03:03,000
And we're going to call it join.

56
00:03:03,000 --> 00:03:05,000
And it's going to be a reporter.

57
00:03:05,000 --> 00:03:14,000
So we're just going to say join, let's say, list 1 and list 2.

58
00:03:14,000 --> 00:03:19,000
So now, and maybe we'll call it join list just to be clear that it's not joining strings.

59
00:03:19,000 --> 00:03:21,000
And we're going to turn that to reporter,

60
00:03:21,000 --> 00:03:25,000
and we're going to put it into the operations category here.

61
00:03:25,000 --> 00:03:29,000
And now we're going to take that and make it an input.

62
00:03:29,000 --> 00:03:34,000
And the input type is going to be a list.

63
00:03:34,000 --> 00:03:38,000
And that's good.

64
00:03:38,000 --> 00:03:40,000
I'm going to say okay.

65
00:03:40,000 --> 00:03:41,000
Here we go.

66
00:03:41,000 --> 00:03:44,000
And here, do the same thing.

67
00:03:44,000 --> 00:03:47,000
I'm going to make that a list.

68
00:03:47,000 --> 00:03:49,000
Say okay to that.

69
00:03:49,000 --> 00:03:52,000
Okay, so there's the block that we'll be working with.

70
00:03:52,000 --> 00:03:55,000
And now, how do we start putting these together?

71
00:03:55,000 --> 00:04:00,000
Well, first let's create a variable called matrix.

72
00:04:00,000 --> 00:04:04,000
So let's see, under variables here, we'll make it a script variable

73
00:04:04,000 --> 00:04:07,000
because we just want to contain it within the block.

74
00:04:07,000 --> 00:04:11,000
Call it matrix.

75
00:04:11,000 --> 00:04:12,000
There we go.

76
00:04:12,000 --> 00:04:17,000
And now we're going to iterate through the length of this list.

77
00:04:17,000 --> 00:04:22,000
And then we're going to, for each item in one list,

78
00:04:22,000 --> 00:04:26,000
we'll add the second item, and then we'll send back a combined list.

79
00:04:26,000 --> 00:04:30,000
Now the trick is you should make sure that the lists going in here are the same length

80
00:04:30,000 --> 00:04:33,000
because if they aren't, you might have unexpected results.

81
00:04:33,000 --> 00:04:37,000
We're going to assume for the sake of this demonstration that they are.

82
00:04:37,000 --> 00:04:40,000
Okay, so we'll just take a loop here.

83
00:04:40,000 --> 00:04:43,000
We'll say like a for loop.

84
00:04:43,000 --> 00:04:48,000
And here we go.

85
00:04:48,000 --> 00:04:54,000
And we'll say from 1 until the length of list 1.

86
00:04:54,000 --> 00:04:56,000
And now what do we do?

87
00:04:56,000 --> 00:04:59,000
Well, we want to combine those lists.

88
00:04:59,000 --> 00:05:02,000
So we're going to make a new list,

89
00:05:02,000 --> 00:05:06,000
and we're going to use this add function here.

90
00:05:06,000 --> 00:05:08,000
Find it down towards the bottom.

91
00:05:08,000 --> 00:05:10,000
There we go.

92
00:05:10,000 --> 00:05:16,000
And what we're going to add is a list

93
00:05:16,000 --> 00:05:18,000
because this is a list of lists,

94
00:05:18,000 --> 00:05:22,000
so we're going to add a list right here

95
00:05:22,000 --> 00:05:25,000
like that with two slots.

96
00:05:25,000 --> 00:05:32,000
And we're going to take item 1 of the first list

97
00:05:32,000 --> 00:05:36,000
and item 1 of the second list.

98
00:05:36,000 --> 00:05:40,000
But of course, we don't want it to be item 1 each time.

99
00:05:40,000 --> 00:05:43,000
That would make the list of only the first items.

100
00:05:43,000 --> 00:05:51,000
We want it to be item i and item i of the first list

101
00:05:51,000 --> 00:05:53,000
and of the second list.

102
00:05:53,000 --> 00:05:56,000
And then we're going to assign those to matrix.

103
00:05:56,000 --> 00:05:59,000
Now, the only other thing that we need to remember is

104
00:05:59,000 --> 00:06:04,000
we need to make sure that matrix is given the type of a list

105
00:06:04,000 --> 00:06:08,000
so that when we first assign lists to it,

106
00:06:08,000 --> 00:06:09,000
the compiler doesn't complain,

107
00:06:09,000 --> 00:06:12,000
or the interpreter, I should say, doesn't complain.

108
00:06:12,000 --> 00:06:14,000
Okay, so let's do that.

109
00:06:14,000 --> 00:06:23,000
And here we're going to set under variables matrix

110
00:06:23,000 --> 00:06:26,000
to an empty list.

111
00:06:26,000 --> 00:06:30,000
That'll help us get started.

112
00:06:30,000 --> 00:06:31,000
All right.

113
00:06:31,000 --> 00:06:34,000
So this operation, again, is called zipping a list,

114
00:06:34,000 --> 00:06:37,000
and let's see if it works as we expect.

115
00:06:37,000 --> 00:06:41,000
So I'll say done, and we'll go to custom blocks here.

116
00:06:41,000 --> 00:06:44,000
I'm going to grab this join list,

117
00:06:44,000 --> 00:06:46,000
and now let's get our numbers from 1 to 10.

118
00:06:46,000 --> 00:06:49,000
So we'll duplicate this.

119
00:06:49,000 --> 00:06:53,000
And again, it's 1 to 15, I should say.

120
00:06:53,000 --> 00:06:54,000
That's fine.

121
00:06:54,000 --> 00:06:56,000
So we're going to pass that in as the first list,

122
00:06:56,000 --> 00:06:58,000
and then let's do this one,

123
00:06:58,000 --> 00:07:00,000
which are the squares of those numbers,

124
00:07:00,000 --> 00:07:02,000
as the second list.

125
00:07:02,000 --> 00:07:03,000
There we go.

126
00:07:03,000 --> 00:07:05,000
And let's try it out.

127
00:07:05,000 --> 00:07:07,000
And okay, we're getting an error.

128
00:07:07,000 --> 00:07:11,000
So let's take a look.

129
00:07:11,000 --> 00:07:16,000
Set matrix to list for i equals 1 to length of list.

130
00:07:16,000 --> 00:07:19,000
Oh, this needs to be the length of list 1.

131
00:07:19,000 --> 00:07:22,000
All right, let's do that.

132
00:07:22,000 --> 00:07:26,000
Let's go under lists here

133
00:07:26,000 --> 00:07:32,000
and get the length of because there we go.

134
00:07:32,000 --> 00:07:36,000
Not just the list, but the length of the list.

135
00:07:37,000 --> 00:07:38,000
And now we didn't get a report.

136
00:07:38,000 --> 00:07:40,000
Let's go check out what's going on here.

137
00:07:40,000 --> 00:07:42,000
Ah, yes.

138
00:07:42,000 --> 00:07:45,000
It would be helpful to add a report to the list at the end.

139
00:07:45,000 --> 00:07:47,000
So let's do that.

140
00:07:47,000 --> 00:07:49,000
All the simple things we need to remember

141
00:07:49,000 --> 00:07:51,000
when we're making blocks.

142
00:07:51,000 --> 00:07:54,000
All right, so let's get our report here,

143
00:07:54,000 --> 00:07:59,000
which should be...

144
00:07:59,000 --> 00:08:00,000
There we go.

145
00:08:00,000 --> 00:08:01,000
Report.

146
00:08:01,000 --> 00:08:02,000
Okay.

147
00:08:02,000 --> 00:08:05,000
And now we're going to report the matrix.

148
00:08:05,000 --> 00:08:10,000
And that is, in fact, what our chart service needs.

149
00:08:10,000 --> 00:08:13,000
So if we go back out to our chart service,

150
00:08:13,000 --> 00:08:18,000
we can go here to network.

151
00:08:18,000 --> 00:08:21,000
Let's bring over our chart.

152
00:08:21,000 --> 00:08:24,000
Drop down.

153
00:08:24,000 --> 00:08:26,000
And we're going to just do the draw.

154
00:08:26,000 --> 00:08:29,000
And remember, we discovered we don't need default options

155
00:08:29,000 --> 00:08:32,000
if we're just going to keep the options in place.

156
00:08:32,000 --> 00:08:35,000
And we can take this here as our lines.

157
00:08:35,000 --> 00:08:37,000
And we'll have to say goodbye to eta,

158
00:08:37,000 --> 00:08:40,000
but because we want to plot this on the screen,

159
00:08:40,000 --> 00:08:43,000
we're going to put that switch to costume there.

160
00:08:43,000 --> 00:08:44,000
There we go.

161
00:08:44,000 --> 00:08:46,000
And let's try it out.

162
00:08:46,000 --> 00:08:47,000
There we go.

163
00:08:47,000 --> 00:08:50,000
So that is a chart of exponential growth.

164
00:08:50,000 --> 00:08:53,000
And if we want to do a similar chart of linear growth,

165
00:08:53,000 --> 00:08:55,000
it would just be a question of changing

166
00:08:55,000 --> 00:08:58,000
this particular function right here.

167
00:08:58,000 --> 00:09:01,000
We'll put that two times in here.

168
00:09:01,000 --> 00:09:04,000
And let's look at the difference between exponential

169
00:09:04,000 --> 00:09:06,000
and linear growth.

170
00:09:06,000 --> 00:09:07,000
And there you go.

171
00:09:07,000 --> 00:09:13,000
So that's a linear function as opposed to an exponential one.

172
00:09:13,000 --> 00:09:14,000
Okay.

173
00:09:14,000 --> 00:09:18,000
So the main thing is those zipping operations

174
00:09:18,000 --> 00:09:20,000
are things that you're going to run into all the time

175
00:09:20,000 --> 00:09:23,000
if you need to chart, because you always need something

176
00:09:23,000 --> 00:09:28,000
for the x-axis and another list for the y-axis.

177
00:09:28,000 --> 00:09:31,000
Now, I'll let you in on yet another secret.

178
00:09:31,000 --> 00:09:35,000
If you don't want to write those zipping functions yourself,

179
00:09:35,000 --> 00:09:38,000
Brian has already written one for us.

180
00:09:38,000 --> 00:09:42,000
And you can find this under here.

181
00:09:42,000 --> 00:09:46,000
If you go to Libraries and you click on Libraries,

182
00:09:46,000 --> 00:09:48,000
and then this is a tab that we haven't used before.

183
00:09:48,000 --> 00:09:50,000
It's called Community.

184
00:09:50,000 --> 00:09:53,000
And community libraries are libraries that are provided

185
00:09:53,000 --> 00:09:56,000
by members of the NetSplocks community,

186
00:09:56,000 --> 00:09:58,000
and you can access them here.

187
00:09:58,000 --> 00:10:03,000
And so if you look and we type in zip,

188
00:10:03,000 --> 00:10:07,000
you can see that there is a zip library.

189
00:10:07,000 --> 00:10:09,000
And if you drop down, you can see that it has

190
00:10:09,000 --> 00:10:11,000
a function called zip.

191
00:10:11,000 --> 00:10:12,000
So let's try this out.

192
00:10:12,000 --> 00:10:16,000
We're going to substitute the zip function that we've written,

193
00:10:16,000 --> 00:10:20,000
which is join list here, and let's use Brian's.

194
00:10:20,000 --> 00:10:22,000
So in this case, you see that it takes a single list,

195
00:10:22,000 --> 00:10:25,000
but we need to expand it to contain two.

196
00:10:25,000 --> 00:10:28,000
We're going to drop our numbers in here.

197
00:10:28,000 --> 00:10:30,000
There's the first slot.

198
00:10:30,000 --> 00:10:35,000
And then we want to drop this function into the second slot,

199
00:10:35,000 --> 00:10:37,000
and let's see if it produces a list.

200
00:10:37,000 --> 00:10:39,000
There it does.

201
00:10:39,000 --> 00:10:40,000
That's our linear list.

202
00:10:40,000 --> 00:10:45,000
Let's do the exponential one.

203
00:10:45,000 --> 00:10:46,000
There we go.

204
00:10:46,000 --> 00:10:50,000
We'll click on that, and you can see that it works

205
00:10:50,000 --> 00:10:52,000
in exactly the same way.

206
00:10:52,000 --> 00:10:54,000
Now, if you look under the covers,

207
00:10:54,000 --> 00:10:56,000
the operations are different.

208
00:10:56,000 --> 00:10:59,000
I'll leave that to you to explore how Brian

209
00:10:59,000 --> 00:11:02,000
has implemented this function.

210
00:11:02,000 --> 00:11:05,000
But let's just drop it back for completeness sake

211
00:11:05,000 --> 00:11:11,000
into our charting operation and see if it works.

212
00:11:12,000 --> 00:11:17,000
It needs to go into the line slot, not into the options.

213
00:11:17,000 --> 00:11:21,000
Let's switch to costume, and there we have it.

214
00:11:21,000 --> 00:11:25,000
Okay, so in this video, you learned what zipping a list is.

215
00:11:25,000 --> 00:11:29,000
It's taking a list of numbers and another list of numbers

216
00:11:29,000 --> 00:11:32,000
and then combining them into a matrix.

217
00:11:32,000 --> 00:11:34,000
And you learned that you need to do that

218
00:11:34,000 --> 00:11:37,000
when you want to chart operations in which you need

219
00:11:37,000 --> 00:11:40,000
to have an x-axis and a y-axis.

220
00:11:40,000 --> 00:11:44,000
And you also learned a little bit about how you can use

221
00:11:44,000 --> 00:11:47,000
community-contributed libraries like Brian's

222
00:11:47,000 --> 00:11:50,000
if you don't want to write those kind of functions yourself.

223
00:11:50,000 --> 00:11:53,000
Although, that's the fun of programming, of course.

224
00:11:53,000 --> 00:11:55,000
All right, that's it for today.

225
00:11:55,000 --> 00:11:58,000
I look forward to seeing you in our next video.

