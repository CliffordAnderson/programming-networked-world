1
00:00:00,000 --> 00:00:04,000
Hi everyone. Welcome back to Programming for a Networked World.

2
00:00:04,000 --> 00:00:08,000
Today, we're going to talk about another way of processing lists.

3
00:00:08,000 --> 00:00:11,000
Sometimes you come across very long lists,

4
00:00:11,000 --> 00:00:15,000
and it becomes tedious to use a for loop to iterate through all the items.

5
00:00:15,000 --> 00:00:20,000
So, in this particular video, we're going to talk about an alternative

6
00:00:20,000 --> 00:00:24,000
to looping through lists when you want to process every item in a list.

7
00:00:24,000 --> 00:00:29,000
So, ready to develop your superpowers when it comes to crunching lists?

8
00:00:29,000 --> 00:00:31,000
Let's get started.

9
00:00:35,000 --> 00:00:41,000
Okay, we're going to be talking today about map, keep, and combine.

10
00:00:41,000 --> 00:00:47,000
These three blocks provide really powerful abstractions for working with lists.

11
00:00:47,000 --> 00:00:53,000
These blocks take a particular operation, or more generally speaking, a function,

12
00:00:53,000 --> 00:00:56,000
and apply it to each item in the list in turn.

13
00:00:56,000 --> 00:01:00,000
Let me bring out the map block so we can talk about it in practice.

14
00:01:00,000 --> 00:01:03,000
The map block, as you see, has two slots.

15
00:01:03,000 --> 00:01:08,000
It has a ring where we put an operator, and then it has a slot for the list.

16
00:01:08,000 --> 00:01:14,000
And what it's going to do is apply the operation that's in the ring

17
00:01:14,000 --> 00:01:19,000
to each item in the list in turn, and then return a new list to you.

18
00:01:19,000 --> 00:01:25,000
That may sound a little abstract, so let's try something in practice to see how it works.

19
00:01:25,000 --> 00:01:29,000
I'm going to take over this numbers from 1 to 10 block,

20
00:01:29,000 --> 00:01:34,000
and as you know, if I click on this, it will create numbers from 1 to 10.

21
00:01:34,000 --> 00:01:37,000
That's pretty straightforward, and I'm going to drop this into our list slot.

22
00:01:37,000 --> 00:01:43,000
Now, if we just use it like it is, then you'll see that with nothing in the ring,

23
00:01:43,000 --> 00:01:46,000
it simply returns the list back to us.

24
00:01:46,000 --> 00:01:49,000
So here you can see that it just returned 1 to 10.

25
00:01:49,000 --> 00:01:53,000
But the magic of the map block is that we can take an operator

26
00:01:53,000 --> 00:01:56,000
and drop it into that slot.

27
00:01:56,000 --> 00:02:01,000
So now let's imagine that what I want to do is to double each of the items in the list.

28
00:02:01,000 --> 00:02:05,000
So we would just say times 2 here, and then, you know,

29
00:02:05,000 --> 00:02:08,000
we have to keep the first space open for each item.

30
00:02:08,000 --> 00:02:14,000
So 1 times 2 is 2, 2 times 2 is 4, and so forth.

31
00:02:14,000 --> 00:02:18,000
The problem is that we don't want to go iteratively through this list,

32
00:02:18,000 --> 00:02:21,000
select each item, and put it into that empty slot.

33
00:02:21,000 --> 00:02:25,000
What we'd like to do is have this block take care of that for us.

34
00:02:25,000 --> 00:02:29,000
So the magic of the block is that by leaving that slot open,

35
00:02:29,000 --> 00:02:35,000
it will simply put in or interpolate each item in the list into that open slot

36
00:02:35,000 --> 00:02:38,000
and then perform the operation.

37
00:02:38,000 --> 00:02:41,000
So you can see now that if I click on this,

38
00:02:41,000 --> 00:02:45,000
I get a new list back with the same number of items,

39
00:02:45,000 --> 00:02:48,000
but each of the items has doubled.

40
00:02:48,000 --> 00:02:50,000
So that's fantastic, right?

41
00:02:50,000 --> 00:02:53,000
Now, what if you wanted to filter a list?

42
00:02:53,000 --> 00:02:58,000
That is, take some type of Boolean operator and apply it to each item in the list,

43
00:02:58,000 --> 00:03:03,000
and then return a new list with only the items that passed your Boolean operator,

44
00:03:03,000 --> 00:03:06,000
passed that filter's test.

45
00:03:06,000 --> 00:03:09,000
So let's say that I have a list of numbers, like we have 1 to 10,

46
00:03:09,000 --> 00:03:11,000
but I want to filter out any odd numbers.

47
00:03:11,000 --> 00:03:13,000
How would I do that?

48
00:03:13,000 --> 00:03:18,000
Well, there is another block that helps you with that type of filtering.

49
00:03:18,000 --> 00:03:23,000
It's keep items from a list that pass a certain Boolean test.

50
00:03:23,000 --> 00:03:27,000
So you see that it's structurally similar to the map block.

51
00:03:27,000 --> 00:03:32,000
So here, I can take that same list of numbers, I can duplicate it.

52
00:03:32,000 --> 00:03:34,000
Oops, didn't mean to click on it.

53
00:03:34,000 --> 00:03:37,000
Let's duplicate it, drop it here.

54
00:03:37,000 --> 00:03:43,000
Okay, now what do I put in that ring to filter the list?

55
00:03:43,000 --> 00:03:49,000
I need to think about how I would identify what is even and what's odd.

56
00:03:49,000 --> 00:03:54,000
So I would use the mod operator for that, and a Boolean equals.

57
00:03:54,000 --> 00:04:01,000
So here, I would say, okay, anything that's divisible by 2 without remainder is even.

58
00:04:01,000 --> 00:04:04,000
We can just test that by putting in 2, and you see that that's true,

59
00:04:04,000 --> 00:04:08,000
but if I put in 3, that's false.

60
00:04:08,000 --> 00:04:12,000
So in the same way that we left a slot open in the map block,

61
00:04:12,000 --> 00:04:15,000
for the map block to apply to each item of the list,

62
00:04:15,000 --> 00:04:18,000
we'll do the same thing here with this block.

63
00:04:18,000 --> 00:04:20,000
We're going to drop it into the ring, and then I'm going to say,

64
00:04:20,000 --> 00:04:25,000
keep items such that they pass this test, and then apply it to our list.

65
00:04:25,000 --> 00:04:31,000
So if we try this, you see that we get back, in fact, a list that's now been filtered.

66
00:04:31,000 --> 00:04:33,000
All the odd numbers have been filtered out,

67
00:04:33,000 --> 00:04:37,000
and we get a list that only contains the even numbers,

68
00:04:37,000 --> 00:04:40,000
that's half the length of our original list.

69
00:04:40,000 --> 00:04:43,000
Great, but there's one more thing that we can do with these blocks

70
00:04:43,000 --> 00:04:45,000
that's really kind of fascinating.

71
00:04:45,000 --> 00:04:49,000
We can also take a list and perform an operation

72
00:04:49,000 --> 00:04:52,000
that combines all the elements together.

73
00:04:52,000 --> 00:04:54,000
Now, you might say, like, why would you want to do that?

74
00:04:54,000 --> 00:04:57,000
Well, imagine that you're trying to create a sum, for example.

75
00:04:57,000 --> 00:05:01,000
So we've got items 1 through 10, but you might want to say,

76
00:05:01,000 --> 00:05:04,000
okay, what's the sum of those items?

77
00:05:04,000 --> 00:05:09,000
So if I wanted to add up 1 through 10, what would the total be?

78
00:05:09,000 --> 00:05:12,000
So again, we can use the plus here to do that,

79
00:05:12,000 --> 00:05:15,000
but here you have to think about, we're going to take 1,

80
00:05:15,000 --> 00:05:18,000
and then we're going to add it to the next item in the list, 2,

81
00:05:18,000 --> 00:05:24,000
and then we want to take 1 plus 2, 3, and add it to the next item in the list, 3,

82
00:05:24,000 --> 00:05:26,000
and so on and so forth.

83
00:05:26,000 --> 00:05:29,000
So we're actually kind of working with two slots here,

84
00:05:29,000 --> 00:05:32,000
because as we go through the list, we want to have what's been accumulated

85
00:05:32,000 --> 00:05:34,000
in terms of what's been calculated already,

86
00:05:34,000 --> 00:05:37,000
and we want to have the new item in the list

87
00:05:37,000 --> 00:05:40,000
that we want to add to that accumulating number.

88
00:05:40,000 --> 00:05:46,000
So in order to perform an operation that combines everything,

89
00:05:46,000 --> 00:05:50,000
we need to leave these two slots open in our operator.

90
00:05:50,000 --> 00:05:57,000
And so here we will take, as I've already hinted, combine,

91
00:05:57,000 --> 00:06:01,000
and it's got a similar format, although it puts the ring at the end.

92
00:06:01,000 --> 00:06:05,000
And so we'll take the numbers 1 through 10,

93
00:06:05,000 --> 00:06:07,000
and we're just going to take this plus,

94
00:06:07,000 --> 00:06:10,000
and here we just leave both slots open.

95
00:06:10,000 --> 00:06:15,000
And kind of incredibly, when you click on this, you get the answer,

96
00:06:15,000 --> 00:06:19,000
that if you add up 1 through 10, all the numbers in that list,

97
00:06:19,000 --> 00:06:23,000
you get the result 55.

98
00:06:23,000 --> 00:06:27,000
So with these three tools in your toolbox,

99
00:06:27,000 --> 00:06:33,000
you can process lists very quickly and very efficiently.

100
00:06:33,000 --> 00:06:35,000
They're also, of course, combinable.

101
00:06:35,000 --> 00:06:38,000
So if you want to apply a map to something,

102
00:06:38,000 --> 00:06:41,000
maybe double the numbers, and then combine them to get a result,

103
00:06:41,000 --> 00:06:43,000
you can do that.

104
00:06:43,000 --> 00:06:45,000
We'll take our numbers 1 through 10 here,

105
00:06:45,000 --> 00:06:51,000
we'll double everything, and then we'll combine it.

106
00:06:51,000 --> 00:06:56,000
So here you can see that, in fact, it is double of what we had previously,

107
00:06:56,000 --> 00:06:59,000
110, rather than 55.

108
00:06:59,000 --> 00:07:02,000
There's lots of really creative ways that you can apply

109
00:07:02,000 --> 00:07:04,000
these three blocks in combination.

110
00:07:04,000 --> 00:07:07,000
And as we go forward in our course, we'll look at some of those,

111
00:07:07,000 --> 00:07:13,000
particularly as we get results back from our calls out to network services

112
00:07:13,000 --> 00:07:17,000
that may provide lists of lists, and we need to abstract from those lists,

113
00:07:17,000 --> 00:07:20,000
gather information, and to turn them into new lists

114
00:07:20,000 --> 00:07:22,000
that we can then use in our programs.

115
00:07:22,000 --> 00:07:24,000
So thank you for joining me.

116
00:07:24,000 --> 00:07:26,000
I hope that you'll try these blocks out,

117
00:07:26,000 --> 00:07:28,000
and I'll see you in the next video.

