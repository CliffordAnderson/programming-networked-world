1
00:00:00,000 --> 00:00:04,680
Hey everybody, my name is Cliff Anderson, and I'm a librarian at Vanderbilt University.

2
00:00:04,680 --> 00:00:09,800
I'm also a member of a research group called the Computational Thinking and Learning Initiative.

3
00:00:09,800 --> 00:00:13,520
In this series, I'm going to introduce you to the fundamentals of programming using a

4
00:00:13,520 --> 00:00:18,480
state-of-the-art tool developed at Vanderbilt University called NetsBlocks.

5
00:00:18,480 --> 00:00:22,480
NetsBlocks makes it easy to get started by cutting down the number of mistakes you can

6
00:00:22,480 --> 00:00:23,640
make.

7
00:00:23,640 --> 00:00:28,180
And by reducing the chance for error, it will help you focus on the important stuff.

8
00:00:28,180 --> 00:00:31,460
So ready to get started with block-based programming?

9
00:00:31,460 --> 00:00:32,460
Stick around.

10
00:00:32,460 --> 00:00:59,580
This series is about learning to code using a development environment called NetsBlocks.

11
00:00:59,580 --> 00:01:04,580
If you're new to programming, the choice about where to begin can be overwhelming.

12
00:01:04,580 --> 00:01:10,100
There are so many options to consider, from C to JavaScript to Python and beyond.

13
00:01:10,100 --> 00:01:14,860
These languages are very different, but they all share one thing in common, namely they

14
00:01:14,860 --> 00:01:16,800
are text-based languages.

15
00:01:16,800 --> 00:01:22,820
That is, you write code by typing out instructions on the screen.

16
00:01:22,820 --> 00:01:26,500
Typing out instructions serves most expert programmers well.

17
00:01:26,500 --> 00:01:31,900
You can express a lot of complex ideas in very terse statements and expressions.

18
00:01:31,900 --> 00:01:36,700
Most software engineers aim to write more like Gertrude Stein than Henry James.

19
00:01:36,700 --> 00:01:41,920
That is, they aspire to conciseness over verbosity, although they can be elliptical at times.

20
00:01:41,920 --> 00:01:45,660
But textual programming languages prove challenging for newcomers.

21
00:01:45,660 --> 00:01:49,220
How do you know what commands to type when you're first getting started?

22
00:01:49,220 --> 00:01:51,720
We're all familiar with the idea of writer's block.

23
00:01:51,720 --> 00:01:55,780
That is, the panic of seeing a white page that you need to fill up with words.

24
00:01:55,780 --> 00:01:57,220
What should I write?

25
00:01:57,220 --> 00:02:00,180
The same kind of thing happens when you're programming in textual languages.

26
00:02:00,180 --> 00:02:05,220
If I want to draw a circle on the screen, what commands do I need to type in?

27
00:02:05,220 --> 00:02:08,540
If you're learning a programming language like Python or JavaScript, you'll need to

28
00:02:08,540 --> 00:02:13,260
look up those commands in the documentation, or more likely Google it and then copy and

29
00:02:13,260 --> 00:02:15,000
paste your solution.

30
00:02:15,000 --> 00:02:16,800
And what happens if something goes wrong?

31
00:02:16,800 --> 00:02:20,620
Like maybe you dropped a parenthesis when copying your code into your text editor.

32
00:02:20,620 --> 00:02:25,060
Well, your code editor will try to highlight your mistake, just like a Word doc.

33
00:02:25,060 --> 00:02:28,140
A code editor may not always be able to pinpoint your mistake as easily.

34
00:02:28,140 --> 00:02:31,940
It basically just says, hey, something happened by the time I reached this line, and now I

35
00:02:31,940 --> 00:02:34,040
don't know how to go further.

36
00:02:34,040 --> 00:02:38,640
Your experience may vary by language, but tracking down a syntax error can take a surprising

37
00:02:38,640 --> 00:02:39,940
amount of time.

38
00:02:39,940 --> 00:02:42,620
And how do professional programmers fix these syntax errors?

39
00:02:42,620 --> 00:02:47,040
Well, they Google the problem, checking out sites like Stack Overflow to read how other

40
00:02:47,040 --> 00:02:50,220
programmers have fixed the issue before them.

41
00:02:50,220 --> 00:02:53,140
So here I've got a JavaScript window in front of me.

42
00:02:53,140 --> 00:02:58,420
This is a cool site called Repl.it that allows you to program in many different languages.

43
00:02:58,420 --> 00:03:02,580
And so I'm just going to start off here and, you know, to begin with, what do I have to

44
00:03:02,580 --> 00:03:03,580
type?

45
00:03:03,580 --> 00:03:04,580
All right.

46
00:03:04,580 --> 00:03:07,540
I'm going to write a program here that's going to say hello to me in JavaScript.

47
00:03:07,540 --> 00:03:09,060
So here we go.

48
00:03:09,060 --> 00:03:10,620
Let's just write this out.

49
00:03:10,620 --> 00:03:14,380
So I'm going to have to say function hello.

50
00:03:14,380 --> 00:03:16,660
We're going to give it a parameter called name.

51
00:03:16,660 --> 00:03:26,220
Then I'm going to put in a curly brace, and then I'm going to console.log, say hello comma.

52
00:03:26,220 --> 00:03:30,220
And then after the quotation mark, I'm going to put a plus symbol, and then I'm going to

53
00:03:30,220 --> 00:03:34,060
put the name that gets passed in with a semicolon.

54
00:03:34,060 --> 00:03:37,380
And then I drop down a line, and let's call that function, so we're going to say hello

55
00:03:37,380 --> 00:03:38,380
clip.

56
00:03:38,380 --> 00:03:43,860
And my name is in quotation marks, and then I put a semicolon at the end, and let's run

57
00:03:43,860 --> 00:03:44,860
it.

58
00:03:44,860 --> 00:03:46,260
And sure enough, it says hello clip.

59
00:03:46,260 --> 00:03:47,260
So it worked.

60
00:03:47,260 --> 00:03:51,700
But hey, look what happens if I just take off this ending parenthesis.

61
00:03:51,700 --> 00:03:53,980
Get like a bunch of red marks here.

62
00:03:53,980 --> 00:03:55,700
There's some squiggly lines.

63
00:03:55,700 --> 00:03:56,700
Let's see what they say.

64
00:03:56,700 --> 00:04:01,860
So this particular line here says TypeScript, comma is expected.

65
00:04:01,860 --> 00:04:05,140
Not sure if I needed a comma there.

66
00:04:05,140 --> 00:04:10,360
Here it says another comma is expected, but that's actually a period.

67
00:04:10,360 --> 00:04:11,740
Another comma seems to be expected.

68
00:04:11,740 --> 00:04:14,500
So a lot of commas seem to be expected.

69
00:04:14,500 --> 00:04:16,420
It says declaration of statement expected.

70
00:04:16,420 --> 00:04:19,180
I'm not even sure what that is.

71
00:04:19,180 --> 00:04:23,140
So you can see there are a lot of errors, but it's not entirely clear how you're supposed

72
00:04:23,140 --> 00:04:24,660
to fix those errors.

73
00:04:24,660 --> 00:04:29,340
Now we could go into Google and see this, but it's, as you know, I just dropped a paren.

74
00:04:29,340 --> 00:04:32,180
And everything's back, and if I run this again, hello clip.

75
00:04:32,180 --> 00:04:33,660
It works fine.

76
00:04:33,660 --> 00:04:39,380
The point is, it takes some experience to learn how to read errors, and it's easy to

77
00:04:39,380 --> 00:04:43,260
make errors, which is kind of a bad combination, because when you're a beginner, you make a

78
00:04:43,260 --> 00:04:46,260
lot of errors, and then you don't know how to fix them.

79
00:04:46,260 --> 00:04:48,780
So let's switch over now to NetsBlocks.

80
00:04:48,780 --> 00:04:53,020
The purpose of a blocks-based programming language is to lower the barrier to entry,

81
00:04:53,020 --> 00:04:56,980
and to make it easier to program without having to Google everything.

82
00:04:56,980 --> 00:05:01,300
Here's the interface for the NetsBlocks programming environment that we'll be exploring during

83
00:05:01,300 --> 00:05:02,620
this series.

84
00:05:02,620 --> 00:05:08,740
As you see, there are these nice sets of blocks along the side, and each of the blocks in

85
00:05:08,740 --> 00:05:11,860
this palette represents a unit of computation.

86
00:05:11,860 --> 00:05:16,340
You program in NetsBlocks by selecting blocks and then snapping them together with other

87
00:05:16,340 --> 00:05:17,900
blocks in the coding area.

88
00:05:17,900 --> 00:05:19,740
That's this area right here.

89
00:05:19,740 --> 00:05:24,540
We'll see the results of the computation either in the coding area or on the stage.

90
00:05:24,540 --> 00:05:26,700
This is what we call the stage.

91
00:05:26,700 --> 00:05:29,740
The guiding metaphor for NetsBlocks is Lego bricks.

92
00:05:29,740 --> 00:05:33,980
NetsBlocks is designed to help you to program without running into those indecipherable

93
00:05:33,980 --> 00:05:34,980
error messages.

94
00:05:34,980 --> 00:05:40,220
In general, if the blocks snap together, your program will work, although it may not always

95
00:05:40,220 --> 00:05:42,700
produce the results that you expect.

96
00:05:42,700 --> 00:05:46,420
The cool thing about NetsBlocks and other block-based programming languages is that

97
00:05:46,420 --> 00:05:51,340
you can play around with stacking these blocks just by moving them onto the scripting area

98
00:05:51,340 --> 00:05:53,820
and building bigger and bigger blocks.

99
00:05:53,820 --> 00:05:58,500
So if you ever have programmer's blocks, just try dragging some new things on and seeing

100
00:05:58,500 --> 00:05:59,500
what they do.

101
00:05:59,500 --> 00:06:02,780
You see, they stack right there, and then you can test them out just by clicking on

102
00:06:02,780 --> 00:06:03,780
them.

103
00:06:03,780 --> 00:06:08,300
I'm going to end this short video with another example of Hello World.

104
00:06:08,300 --> 00:06:13,220
We're going to ask our mascot, Alonzo, to help us out a lot during this series.

105
00:06:13,220 --> 00:06:17,580
So this time we're going to recreate our Hello World program in NetsBlocks.

106
00:06:17,580 --> 00:06:22,300
And we'll do this by exploring the palette and finding the different blocks that we need

107
00:06:22,300 --> 00:06:24,980
to get Alonzo to say hello to us.

108
00:06:24,980 --> 00:06:29,060
So the first thing that we need is this Say Hello block.

109
00:06:29,060 --> 00:06:32,700
Here's Alonzo, and we want him to say hello to us.

110
00:06:32,700 --> 00:06:36,720
So if we click Say Hello, Alonzo says hello.

111
00:06:36,720 --> 00:06:39,040
But we don't quite yet have our name, right?

112
00:06:39,040 --> 00:06:42,880
So the next thing is, how will Alonzo know our name?

113
00:06:42,880 --> 00:06:52,680
So let's go here to Sensing, and let's grab Ask What Is Your Name? and wait.

114
00:06:52,680 --> 00:06:55,880
And then there's another block that has the answer.

115
00:06:55,880 --> 00:06:58,720
So let's try this.

116
00:06:58,720 --> 00:06:59,720
Ask What Is Your Name?

117
00:06:59,720 --> 00:07:03,920
A little box pops up, and we can input box, and we can put in my name here.

118
00:07:03,920 --> 00:07:06,440
Oh, it didn't say hello to me.

119
00:07:06,440 --> 00:07:07,440
Why is that?

120
00:07:07,440 --> 00:07:08,440
Well, here's the answer.

121
00:07:08,440 --> 00:07:10,640
Cliff, we need to put it into our computation.

122
00:07:10,640 --> 00:07:11,880
We haven't done that yet.

123
00:07:11,880 --> 00:07:13,160
So how do we do that?

124
00:07:13,160 --> 00:07:14,240
Well, OK.

125
00:07:14,240 --> 00:07:15,560
So let's take a look here.

126
00:07:15,560 --> 00:07:18,040
Maybe we need another operator.

127
00:07:18,040 --> 00:07:20,840
And we're just going to do this, called Join.

128
00:07:20,840 --> 00:07:23,120
And you see it says Hello World.

129
00:07:23,120 --> 00:07:26,600
But I'm going to put my name in, and then we're going to drop this right inside that

130
00:07:26,600 --> 00:07:27,600
slot.

131
00:07:27,600 --> 00:07:30,400
OK, let's try it again.

132
00:07:30,400 --> 00:07:33,120
So here we go.

133
00:07:33,120 --> 00:07:35,040
Alonzo says, what's your name?

134
00:07:35,040 --> 00:07:40,400
I put in Cliff, and it says, hello, Cliff.

135
00:07:40,400 --> 00:07:44,220
So that's a short example of a block-based program.

136
00:07:44,220 --> 00:07:47,080
We're going to get into really deep and complex examples.

137
00:07:47,080 --> 00:07:51,840
A lot of people say, like, block-based programming is just a beginner's programming language.

138
00:07:51,840 --> 00:07:54,600
It's like programming with training wheels on.

139
00:07:54,600 --> 00:07:58,320
But you're going to see throughout this course that that's definitely not the case.

140
00:07:58,320 --> 00:08:03,440
In fact, block-based programming allows you to get into much more complex ideas and concepts

141
00:08:03,440 --> 00:08:06,920
than you would have in many other programming languages, or that you would be able to reach

142
00:08:06,920 --> 00:08:11,000
in other programming languages without a lot of experience.

143
00:08:11,000 --> 00:08:14,820
But the thing is, it makes it friendly and accessible and fun to program.

144
00:08:14,820 --> 00:08:16,480
And that's the most important thing.

145
00:08:16,480 --> 00:08:18,880
We're here to have fun as we learn.

146
00:08:18,880 --> 00:08:22,500
So I invite you to stick around for the series on block-based programming.

147
00:08:22,500 --> 00:08:27,240
And let's see how far we and Alonzo can take you on this journey.

148
00:08:27,240 --> 00:08:29,160
Thanks for joining me, and see you next time.

149
00:08:33,440 --> 00:08:38,400
♪♪♪

