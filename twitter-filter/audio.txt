Welcome back, everyone, to Programming for a Network
World.
We're going to be continuing our exploration
of textual analysis.
But this week, we're going to explore
how to get a feed from Twitter and then
to screen out any bad words that might be in that feed.
So ready to develop your own parental filter in NetBlocks?
Let's get going.
OK, so here's our project.
As I said, we're going to reach out and get tweets from Twitter
on a particular topic.
And then we're going to develop a filter for those tweets that
will examine any tweets that have insulting, negative,
foul language, however you want to put it.
And we're going to try to filter those out.
And we're also going to develop a kind of sensitivity
level that you can select to decide how carefully you want
it to be filtered out or whether you
might be willing to risk a few bad words coming through.
So let's get started by just bringing over our network tools
here.
So I'm going to go over to the call cloud variables.
That's not what I want.
I want Twitter, which is down here at the bottom.
OK.
And let's just see how this works.
So we're going to do a search.
And you see here that there's a keyword and account.
So let's start.
I'm going to choose a kind of homegrown example here.
I thought kind of what I should use
to illustrate this, some kind of contested topic.
And I thought, OK, well, we just released
a new logo at Vanderbilt. Some people really love the logo.
Some people really don't like the logo.
So we're going to look for Vanderbilt logo
and see what people are tweeting about the logo.
So here we go.
I'm sure that everybody listening to this
after they see it will have their own opinion.
Send a tweet about it and get included in this list.
OK, so Vanderbilt logo.
And let's just get a count of 20.
And you see here that what comes back are tweets.
And good to see Vanderbilt golf.
Well, you have to kind of pull this out.
Vanderbilt introduces a new logo.
So the old logo was unique.
Does Vanderbilt have a new logo?
So a lot of this is kind of neutral.
But probably some people in there have some negative takes.
And hopefully, people have positive takes, too.
Now, you notice when you look at this
that the tweets are coming through,
but there's some metadata that's included on the front end.
And we don't really want that because we
want to send just the content of the tweet
to our natural language processing toolkit.
And so what we need to do first is work with these tweets
to split them up a little bit and take off that metadata
and also take off the handle of the person that
is sending the tweet and just get
the content of the tweet itself.
So let's start by doing that.
In order to do that, we're going to create some variables.
And so I'm going to bring over some script variables
that we'll start using.
And let's just set this one to get tweets.
And then we'll set tweets over here to call tweets.
So that'll get our tweets.
So that's good.
And then let's get the next one where
we tokenize those tweets and we split them by word.
And so that will help us then to be
able to filter out the parts of the tweet
that we don't want to send for NLP examination.
So we'll call this tokens.
And here I'm going to set tokens.
Maybe I'll move the stage over a little bit
so we can see this better.
I'll set tokens here to let's get this operator here split.
We're going to split tokens.
But we actually need to map this,
I guess, because we're dealing not just one set,
but a whole bunch of tokens.
So let's get our map block out there.
And so we're going to map this split here.
And we'll put nothing in there.
And we're going to do it by word.
Oops, this is the wrong place.
This needs to go in here.
And the list goes over here.
Now, let's start seeing if we're making
the progress we'd like.
So what we'll need to do is go to Control here and find
our report block.
And we'll just report those tokens,
make sure that we're getting back what we expect.
So let's run this.
And no, indeed, we're not.
So, oh, I put in tokens.
This needs to be tweets.
There we go.
All right, let's see if this works now.
OK, so you can see now that everything that's
considered a word, and that could be the beginning
of the parentheses here.
And these are the handles all sorted out.
It's pretty uniform.
So we can see that all we really need to do,
then, is we want to get rid of 1, 2, 3, 4, 5, 6,
the first six columns.
And so how do we get rid of those columns?
Well, we can take another map.
And we could just say that we want column 7
to the end of that list.
So we'll just drop the first six by mapping
that we want only the content.
So I'm going to call these contents.
And so here's how we'll do this.
We're going to set contents to a map.
Let's get this over here.
And in the map, we're going to say item.
Let's see, let's take, yeah, item here.
Now, we don't want 1, or we can't just say 8 or whatever,
because we actually need more than one item.
So we can drop in here more than one.
So we want items number 7.
And then to 10, well, the thing is,
we don't know where the list actually ends.
So we're going to grab length of list.
And the nice thing about this map
is these empty slots that we leave
are going to be filled in with the items from the list.
So we'll know, for example, if there are particular tweets
that are longer than others, that we'll
go all the way to the end and capture all the content.
So then we're going to use here tokens as what we map over.
Let's see if this works by returning the contents now.
And you can see now that we have a smaller list of lists.
And it's just listing the content.
It's actually now removed those first seven of our columns
so that we just have the content,
which is what we wanted.
So we're making progress here.
But now we need to compose it back together with a join.
OK, so how do we do that?
We're going to use our combine block.
And let's make another variable here.
So maybe we'll call this combined.
OK, so let's then set combined here.
And as I say, we'll go out and get our combine block.
Now, combine, as we know, it's a little bit different
in its style.
It's going to take this list.
And then it's going to create all the elements in the list
will be joined together using some kind of operator.
And the operator needs to have two slots.
It's basically a slot for how it's
going to operate with each element in the list.
And then we'll continue to process the list.
So it's two slots rather than just one.
So let's go over here.
And the two slots that we want are going to be under join.
And we want to join things with a space in between.
So that's what we're going to do.
If I can find join here.
All right, so I'm going to do it like this.
And we're going to join, leave an empty slot there,
put a space in the middle.
And then we'll put another slot there.
OK, so that's how we're going to combine it.
Now, the thing is, it's the same problem
we had before, which is we don't want to just combine
one row this way.
We want to combine all the rows this way.
So we need to have a map.
And this could be a little confusing.
Sometimes when you use two of these higher order functions
together, it looks a little complicated.
But it's the same principle.
We're just going to apply this to every row.
And that should take every single row
that has each of those columns, no matter
how many columns there are, and combine it into a single string
or just a textual element.
So we just need to map this now over words,
or I guess in this case, combined.
And then we want to report combined.
So let's see here if that works for us.
And it did not yet.
So where did we go wrong here?
Oh, oh, oh, oh.
I'm getting ahead of myself.
It's the second time I've done it.
We want to do it over contents.
The data should be flowing from top to bottom.
So each time that we create a new variable,
that goes in as the input.
And then it's set to another variable that's,
in a sense, the output.
So let's try that again.
OK, and there we go.
So now, those are the tweets.
But they're the tweets without the metadata.
They're the tweets without the indication
of how much they've been retweeted
and without the indication of who sent them.
There could be scenarios in which you
want to keep that information and then put it back
into a table and just have the columns maybe
have three parts, metadata, who sent the tweet,
and the content of the tweet.
But for this project, we don't actually need that.
So I'm just going to stay with this
to keep it on the simple side.
So that's the list processing that we
have to do to get our tweets.
Now, the next stage here is we want
to think about how to go through each of these tweets
and then examine to see whether they contain language that
should be filtered out.
So the way we're going to do that is,
let's go back over to the network.
And we'll bring another call block over.
And let's just see how this works.
We're going to go back to the service
here under Language, Parallel Dots.
And you can see here that we've got getAbuse,
getEmotion, getIntent.
We're going to go with getAbuse.
And let's just test this.
I like the new logo.
So this should not be abusive.
Let's call that.
And you can see here that it gives a very low probability
that that's abusive, basically almost none.
There's also an indication of whether it's hate speech.
And then there's a high probability that it's neither.
Now, if I change this and I maybe said, I detest,
now, is it abuse?
It's just an opinion, really.
But it should register higher on an abuse scale.
Only a little bit.
So let's see.
I detest the new logo.
Didn't really count as abuse.
But how about, I detest the designers of the logo.
Again, pretty low.
So you see that it'll pass a lot of things through.
I feel bad typing all this stuff.
That's a lot closer to abusive.
So you see here, I hate next blocks.
I hope you don't feel that way.
But if you did, we'd just screen you out.
So there you go.
That's abusive, according to our natural language processing
unit.
So here's the thing.
We're going to use that.
And we're going to plug this in to the tool
here that we've built, this set of blocks.
And we're just going to process each of these tweets.
And then we're going to respond appropriately.
So let's take a, under variables here,
we're going to take this block called forEach.
Let's go ahead and grab it.
There we go.
Pull this off.
And so we're going to put in the forEach here
that for each item in, let's say, content, actually
combined, sorry, there we go, for each item in combined.
And we could make this a little bit clearer
by calling it forEachTweetInCombined.
Let's do something.
And what we want to do is use an if else.
So we will call parallelDots and ask if it's abusive.
And then if it is, we'll register that it is.
If not, we'll pass it through.
So we want to, let's just take this here
and see if we can set a threshold for being abusive.
So if parallelDots comes back and says
the threshold is less than a certain amount,
let's say 0.05, then we'll say that it's not abusive.
If it's higher than that, then we'll say that it is.
Maybe let's just try 0.5 for now.
So now we'll just put in here, just for a moment,
something to kind of stub in what we want to do.
So I'm going to say, I don't really
need the report block anymore.
Get that out of there.
So we want to say not abusive or abusive.
Actually, it's this tweet here that goes in.
So that's going to contain each line.
We're going to call parallelDots.
We're going to get that information.
And then we're going to see if it meets the threshold.
And if it does, then it will fall into the abusive.
If it goes under, it'll be not abusive.
Now, we can just run this.
And let's just run it for maybe three tweets
just to check out what it says, because we
want to build this into a larger program.
But I just want to test it to see if it works.
And non-abusive, non-abusive, non-abusive.
Let's just take a look to see, for example,
what is actually coming back in terms of what
parallelDots is telling us.
So one way we could do that is we
could do the call above here.
So we could just set another variable.
Let's do abuse score.
So it gives more insight into actually
what the scores are that are coming back.
And then let's, for each tweet, we want to set that here first.
Let's get the variable set.
Oops.
OK.
And this should be inside the forEach.
OK.
So we're going to set this abuse score
to calling for this tweet.
And then, oh, I think here's the problem.
We need to actually drill into that abuse score a little bit
in order to get the actual number.
We're not actually getting to the right number,
which is why this is not working.
OK.
So that's probably what our mistake is right here.
So remember, when we call parallelDots and we say,
let's just give it the word abuse,
then it has a score here.
So we need to actually get this score.
And what we're passing in is this list of lists.
And that's why it's not working.
So let's go over here to get that structured data library.
OK.
So we're going to get the structured data library.
And let's go down and start pulling pieces out of this.
So here, I think what we want to get is abusive.
And then let's pass in this tweet.
And then we should get a score.
And that's giving us an actual score.
So that's what we needed.
And that's fine.
So let's bring this back in here.
And that will give us the score.
And there's our tweet that goes in.
And then we can say, if the abuse score is less than 0.1,
say not abusive otherwise.
So now we can test it again.
Let's bring this over here so it's
a little bit easier to read.
And let's give it another shot.
Not abusive.
Not abusive.
Again, abusive.
OK.
So now we know abusive.
OK.
So we've set a threshold.
And you can see that it's flagging
certain of our tweets as abusive and others as non-abusive.
So now, in principle, we've got everything working.
What we need to do is just turn this
into something that's got a better user interface.
So what we want to do now is let's start by, well,
always good to start by putting a hat block at the top.
So we'll do that.
And then let's ask a question at the beginning.
I think that we may want to switch Ada out
for a different costume here.
Let's just go to our turtle.
And that will be, I think, easier to use.
OK.
So now we want to ask a question.
So that is going to be under Sensing right here.
And the question we want to ask is, what topic on Twitter
would you like to search?
OK.
And then we'll wait.
Now, so here, we're going to take the answer
and plug it in there.
So that will allow folks to put in whatever topic
they'd like to have.
And then we also want, later on, to ask
for the level of sensitivity here.
So after we get through looking up
the contents of that topic on Twitter
and doing the list processing, then
we want to think about what level of sensitivity.
What is the sensitivity?
What level of sensitivity do you want?
And we'll set a score between 1 to 100.
OK.
Now, here, we're going to use the answer again,
because now it's going to be set to the answer for this question.
And when we set this abusive score here,
let's set the value of that abusive score.
It comes back with a number that's up to 1,
so like 0.99 or something at the highest level.
So if we want to think about the sensitivity level,
then we need to take that answer, 1 to 100,
and just divide it the same way by 100.
Here we go.
And now we can use this here to set our level.
So that will set the level.
Excuse me.
And then we'll be able to see, for example,
based on our answer, we'll let people
set their own sort of comfort level
with seeing texts come through.
Now, the last thing that we want to do
is just write on the screen.
And we've seen this before in the Sentimental Writer,
but I want to take the time to actually go through
and do it this time.
So let's just start here by clearing the screen.
So we'll put a clear up at the top.
And then let's set a pen color.
This is all just to make sure that we can write in a nice way.
So we'll set the default pen color to a nice blue.
Then I think that what we'll do is we'll put
the pen in the right place.
So let's go, and you kind of have to experiment with this
just to kind of figure out where you want to start.
On our screen, I think negative 220 and then the y value of 150
should put us in the right place.
We can sort of test where that would be just
by dropping this down here.
You can see that it puts us up in this corner.
Maybe it's a little bit too far over,
so let's say negative 210, something like that.
That looks good.
So that's where we'll start writing, and with the color
blue.
So that's good.
Now, we need to do the writing part, which is actually
down here.
So we'll take out these stubs that we put in, the say blocks.
And so this one is going to be if something's not abusive.
So basically, what we want to do is write the item to the screen,
and we can do that with pen here.
Let's go down to write.
And we're going to make it size 10,
because even at that size, the whole tweet
won't fit on screen.
There are some libraries that you
can use that we can provide to wrap the writing on the screen,
but we're not going to go that far in this
because our goal here is not to show you
how to build those kind of libraries.
It's just to help you to see what
the tweets are that are coming through
and what ones are getting filtered out.
So what we want to write, though,
is the tweet, content of the tweet.
So there we go.
And that's good.
Now, the only thing that we need to do is just make sure
that we're in the right place here.
So at the end of our writing, we want to go back to,
let's see, set x.
x is going to be stable, because x is always
going to be just starting on this left-hand side.
So I think we said that was negative 210, right?
And then the y value is going to change.
So we're going to take this change block here.
We're going to change the y value every time.
And since we want to be going down on the screen,
we're not going to change it positively.
That would move it up.
We're going to change it negatively to move it down.
So that's good.
And we can use basically the set of blocks
here with a little tweak for the abusive part.
The tweak is we're going to change the pen color
so that we're writing in a different color
to indicate that we've filtered something out.
And we're also not going to pass through the tweet,
because that would kind of defeat the purpose.
We're just going to write in redacted.
Put censored.
You could put not shown, whatever you like to say.
So redacted.
And let's change the pen color.
So let's go over here, change the pen color,
and let's put it in maybe a lighter red, something
like that.
And then we need to set the pen color back.
And let me duplicate this up here.
Oh, I got the whole thing.
That's more than I needed, but it's all right.
So let's drag this down and set the pen color back.
I think that should be it.
Shall we give it a shot?
Let's try this.
So I'm going to get the screen a little bit bigger
so we can see what's going on here.
We don't need to watch the code as much.
And let's hit that green flag.
So what topic would you like to search on Twitter?
And we're going to go for the Vanderbilt logo.
And what's sensitivity?
Let's just go for, like, 30.
We're going to be pretty sensitive.
So we've got some positive ones, and then we've
got some ones that were redacted.
And you can see that the positive ones are
indeed positive.
Good to see Vanderbilt golf coaches and players
wearing the correct logo.
New logo didn't catch up.
Introduce a new logo.
Fans see the beauty.
Logo battle, who you got.
So there were two comments that were taken out
based on our sensitivity level.
So if we run this again and we set a very low sensitivity
level, let's just set it at a 1, we
should see probably even more redactions.
Oh, I need to put Vanderbilt logo here.
And then let's set a 1.
We got one more redaction.
And then if we ran this again and we
set our sensitivity level as 99, we only had one item redacted.
So you can see that our sensitivity
to what's coming through our filter, we can easily adjust.
And that's all thanks to the natural language processing
that's built into NetsBlox.
So that's the end of our segment for today.
I look forward to seeing you in our next video.
