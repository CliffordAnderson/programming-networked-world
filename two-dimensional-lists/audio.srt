1
00:00:00,000 --> 00:00:04,800
Hi everyone, welcome back to our series on programming for a networked world.

2
00:00:04,800 --> 00:00:08,400
In this video, we are covering two-dimensional lists.

3
00:00:08,400 --> 00:00:13,280
The term two-dimensional list is a formal way of talking about a very common data structure

4
00:00:13,280 --> 00:00:19,280
that we may alternatively call a list of lists, a matrix, a table, or a spreadsheet.

5
00:00:19,280 --> 00:00:24,080
Keeping track of data using columns and rows proves efficient in many scenarios.

6
00:00:24,080 --> 00:00:28,880
Netsblocks also optimizes the display of two-dimensional lists to make it easier for you to read and

7
00:00:29,040 --> 00:00:30,560
edit them.

8
00:00:30,560 --> 00:00:35,360
Ready to expand your knowledge of lists into the second dimension?

9
00:00:35,360 --> 00:00:42,160
Let's get started.

10
00:00:42,160 --> 00:00:44,360
What is a two-dimensional list?

11
00:00:44,360 --> 00:00:47,600
In the last video, we talked about one-dimensional lists.

12
00:00:47,600 --> 00:00:51,680
As you recall, a one-dimensional list is just an ordered sequence of items.

13
00:00:51,680 --> 00:00:54,720
So my grocery list is a one-dimensional list.

14
00:00:54,720 --> 00:00:58,160
I need to buy eggs, milk, tea, and so on.

15
00:00:58,160 --> 00:01:01,600
But I also mentioned that lists can hold data beyond strings and numbers.

16
00:01:01,600 --> 00:01:04,800
A list can contain sprites, for instance, or blocks.

17
00:01:04,800 --> 00:01:08,520
But what happens if you put a list inside of a list?

18
00:01:08,520 --> 00:01:11,040
Now you have a two-dimensional list.

19
00:01:11,040 --> 00:01:14,160
How might a list of lists prove valuable in a program?

20
00:01:14,160 --> 00:01:19,360
Let's imagine a scenario where you are programming for people who are speaking different languages,

21
00:01:19,360 --> 00:01:22,640
and you wanted Ada to interact with them in their own languages.

22
00:01:22,640 --> 00:01:26,520
You might want to keep a table of equivalent phrases from those different languages.

23
00:01:26,520 --> 00:01:30,560
So for instance, I might want to create a list of greetings to use in my program.

24
00:01:30,560 --> 00:01:35,640
My English greeting would be Hello, my Dutch greeting would be Guten Tag, my German greeting

25
00:01:35,640 --> 00:01:40,260
would be Guten Tag, and my Chinese greeting might be Ni Hao.

26
00:01:40,260 --> 00:01:43,800
And I would want to put all those greetings into a list.

27
00:01:43,800 --> 00:01:47,980
And just so we had an equivalent way to say goodbye, I'd want to do the same for saying

28
00:01:47,980 --> 00:01:51,840
goodbye in Chinese, Dutch, French, German, etc.

29
00:01:51,840 --> 00:01:54,680
So how can we keep all that information together?

30
00:01:54,680 --> 00:01:56,320
The answer is simple.

31
00:01:56,320 --> 00:01:59,520
We just have to put both lists inside of a list.

32
00:01:59,520 --> 00:02:02,160
And that will make a two-dimensional list.

33
00:02:02,160 --> 00:02:07,800
And then we'll see, as we do that, that it forms what looks like a table in NetsBlocks.

34
00:02:07,800 --> 00:02:12,160
So let's get started and see how that works.

35
00:02:12,160 --> 00:02:15,520
So I'm going to grab a list here and bring it over.

36
00:02:15,520 --> 00:02:22,840
And now I'm going to put on this list a series of languages we want to use.

37
00:02:22,840 --> 00:02:42,080
So let's say Chinese, and Dutch, and French, and German, and English, let's not forget

38
00:02:42,080 --> 00:02:43,080
English.

39
00:02:43,080 --> 00:02:45,200
OK, so that's a good list.

40
00:02:45,200 --> 00:02:47,480
And then let's put the greetings that we want for each of these.

41
00:02:47,480 --> 00:02:52,440
So I'm going to open up slots now for each one of these languages to put in the way that

42
00:02:52,440 --> 00:02:55,040
we would like to greet people.

43
00:02:55,040 --> 00:03:03,360
So let's say in Chinese, that's Ni Hao.

44
00:03:03,360 --> 00:03:07,640
And then in Dutch, Guten Tag.

45
00:03:07,640 --> 00:03:13,440
And in German, oh, it's in French, Bonjour.

46
00:03:13,440 --> 00:03:17,680
And in German, Guten Tag.

47
00:03:17,680 --> 00:03:20,640
And in English, hello.

48
00:03:20,640 --> 00:03:25,960
Now let's do the same thing with another list where we say our goodbyes.

49
00:03:25,960 --> 00:03:31,680
OK, whoops, keep clicking on it when I don't mean to, just when I get those arrows.

50
00:03:31,680 --> 00:03:36,520
OK, so Chinese, that would be Zai Jian.

51
00:03:36,520 --> 00:03:42,400
And in Dutch, we'll say Tot Ziens.

52
00:03:42,400 --> 00:03:46,400
And in French, Au Revoir.

53
00:03:46,400 --> 00:03:51,280
And in German, let's say TschÃ¼ss.

54
00:03:51,280 --> 00:03:56,600
Oops, there we go.

55
00:03:56,600 --> 00:04:01,240
And in English, finally, we'll just say, goodbye.

56
00:04:01,240 --> 00:04:06,360
OK, so now we have these three lists, but we want to put them together so that they're

57
00:04:06,360 --> 00:04:08,280
just a single data structure.

58
00:04:08,280 --> 00:04:11,320
And here's where the cool thing happens with a two-dimensional list.

59
00:04:11,320 --> 00:04:14,080
So I'm going to take a list, and I'm going to open three slots.

60
00:04:14,080 --> 00:04:19,320
And I'm going to move the first list into the first slot, the second list into the second

61
00:04:19,320 --> 00:04:24,840
slot, and I'm going to move the third list into the third slot here.

62
00:04:24,840 --> 00:04:26,800
Now this is a two-dimensional list.

63
00:04:26,800 --> 00:04:29,600
You can see that it's a list of lists.

64
00:04:29,600 --> 00:04:33,520
And when I click on it, it displays like a table.

65
00:04:33,520 --> 00:04:39,200
So you can see here that this is the column with the Chinese greetings and the Dutch greetings,

66
00:04:39,200 --> 00:04:43,160
the French greetings, the German greetings, and the English greetings.

67
00:04:43,160 --> 00:04:48,440
Now if you want to extract any information from this, how would you do that?

68
00:04:48,440 --> 00:04:54,280
OK, so you would use the same item of, and then you would drop this list of lists into

69
00:04:54,280 --> 00:04:55,280
it.

70
00:04:55,280 --> 00:04:57,800
But now what is item one going to get us?

71
00:04:57,800 --> 00:05:01,880
And here's where we have to learn to think about how lists of lists are composed.

72
00:05:01,880 --> 00:05:07,680
So if we ask for item one of this list, it's going to return us the first list.

73
00:05:07,680 --> 00:05:10,300
There we go, Chinese, Dutch, French, and German.

74
00:05:10,300 --> 00:05:16,460
So if we actually wanted to get item one of that list, then we'd put item one around

75
00:05:16,460 --> 00:05:20,700
this again like this, item one of, like that.

76
00:05:20,700 --> 00:05:23,340
And then we get Chinese, OK?

77
00:05:23,340 --> 00:05:29,900
And so if we wanted to, for example, have bonjour, then we'd have to go to, can you

78
00:05:29,900 --> 00:05:37,660
guess it, item two, so that's the second list right here, and then we want to get item three

79
00:05:37,660 --> 00:05:39,340
from that list.

80
00:05:39,380 --> 00:05:40,860
And there's bonjour.

81
00:05:40,860 --> 00:05:44,820
So when you're thinking about it, make sure when you're indexing into these lists that

82
00:05:44,820 --> 00:05:52,420
you index first into the lists that you want, and then subsequently into the item in the

83
00:05:52,420 --> 00:05:53,580
list that's returned.

84
00:05:53,580 --> 00:05:58,580
So thinking about this, you think about the list that you want first, and then the item

85
00:05:58,580 --> 00:05:59,820
in that list.

86
00:05:59,820 --> 00:06:03,040
And if you have more deeply nested lists, it's the same process.

87
00:06:03,040 --> 00:06:06,900
You keep drilling down to the list that you want until you finally are able to pull out

88
00:06:06,900 --> 00:06:10,600
an item from the list that you extract.

89
00:06:10,600 --> 00:06:14,460
Now that we've seen how to do this, let's go ahead and build the program that we had

90
00:06:14,460 --> 00:06:15,460
in mind.

91
00:06:15,460 --> 00:06:21,460
So the program that I want to do is, I want to have Ada here greet us in our own language.

92
00:06:21,460 --> 00:06:22,780
How should we do that?

93
00:06:22,780 --> 00:06:31,700
So I'm going to start a program with when clicked, it's always a good starting point,

94
00:06:31,700 --> 00:06:34,220
and then I'm going to create some variables.

95
00:06:34,220 --> 00:06:40,700
Let's create script variables here, and I'm going to name the first one language, and

96
00:06:40,700 --> 00:06:49,220
then I'm going to name the second one language selection.

97
00:06:49,220 --> 00:06:54,660
Now that I have those variables, I want to set the languages, or the, I guess I'll call

98
00:06:54,660 --> 00:06:59,260
this languages just to be clear.

99
00:06:59,260 --> 00:07:07,980
I'm going to set the languages to our list of lists.

100
00:07:07,980 --> 00:07:13,460
And then I want Ada to ask us what language we prefer her to speak in.

101
00:07:13,460 --> 00:07:19,940
So I'll bring this down here for this ask block, and I'm going to say, what language

102
00:07:19,940 --> 00:07:21,580
do you speak?

103
00:07:21,580 --> 00:07:27,420
I guess we have to start off with English because there is no neutral language obviously.

104
00:07:27,420 --> 00:07:31,060
So we'll start with English, and then we'll say, what language do you speak?

105
00:07:31,060 --> 00:07:36,100
And remember that the answer will come in the form of this answer block.

106
00:07:36,100 --> 00:07:37,460
Okay.

107
00:07:37,460 --> 00:07:42,500
Then we want to set the language here.

108
00:07:42,500 --> 00:07:48,420
We want to set the language selection, and here's what we have to think about.

109
00:07:48,420 --> 00:07:54,660
We want to set it to the index of the response in the first list.

110
00:07:54,660 --> 00:07:59,220
So we know the first list contains all the languages that we have.

111
00:07:59,220 --> 00:08:04,540
So we have a block down here that says the index of, so we want to look up where this

112
00:08:04,540 --> 00:08:10,180
answer block appears, where this answer appears in our first list.

113
00:08:10,180 --> 00:08:16,700
And so we need to know that, but we also have to extract that first list.

114
00:08:16,700 --> 00:08:17,940
We can't just give it the list of lists.

115
00:08:17,940 --> 00:08:22,180
We need to get the first list in the list of lists like this.

116
00:08:22,180 --> 00:08:28,260
So now we're going to be asking, okay, for the language that you responded, what language

117
00:08:28,260 --> 00:08:30,260
is that in our list of lists?

118
00:08:30,260 --> 00:08:32,960
So basically, what column is it?

119
00:08:32,960 --> 00:08:38,580
And then by identifying that column, we'll know in the future where to draw the equivalent

120
00:08:38,580 --> 00:08:41,980
language forms for Ada's responses.

121
00:08:41,980 --> 00:08:43,540
So we'll now just do the second part.

122
00:08:43,540 --> 00:08:45,260
Let's just do a simple hello, goodbye.

123
00:08:45,260 --> 00:08:49,140
So Ada will say hello, and then Ada will say goodbye.

124
00:08:49,140 --> 00:08:57,540
So I'll go to looks, and I'm going to bring over this hello block, and we'll use it twice.

125
00:08:57,540 --> 00:09:06,100
But the first time, we're going to index into the list here, and I'm going to get item,

126
00:09:06,100 --> 00:09:12,980
and I'm going to use language selection, because that's what we assigned here.

127
00:09:13,020 --> 00:09:21,140
So we want item, language selection, and that's going to give us the index that we need of,

128
00:09:21,140 --> 00:09:28,420
and we know that this particular row has all of the hellos, forms of saying hello in different

129
00:09:28,420 --> 00:09:31,700
languages, so we want that with our languages.

130
00:09:31,700 --> 00:09:39,340
And then we can duplicate this block, put it here, and we know the third row has all

131
00:09:39,340 --> 00:09:41,660
the forms of goodbye.

132
00:09:41,660 --> 00:09:48,740
So now I can drop this into here, and into here, and let's see if it works.

133
00:09:48,740 --> 00:09:53,180
So I'll click on this, and Ada says, what language do you speak?

134
00:09:53,180 --> 00:09:56,100
Let's start off with saying that we speak Chinese.

135
00:09:56,100 --> 00:09:57,540
Aha.

136
00:09:57,540 --> 00:10:00,140
I've got a mistake here.

137
00:10:00,140 --> 00:10:02,300
Let's see what's going on.

138
00:10:02,300 --> 00:10:16,580
Index of answer in item one of languages, oh, right, this should be languages, not language

139
00:10:16,580 --> 00:10:17,580
selection.

140
00:10:17,580 --> 00:10:19,140
There we go.

141
00:10:19,140 --> 00:10:20,580
All right.

142
00:10:20,580 --> 00:10:22,460
So let's try that again.

143
00:10:22,460 --> 00:10:25,820
Got to use the right list.

144
00:10:25,820 --> 00:10:34,780
Click on this, and we're going to say Chinese, and then Ada responds, ni hao, zai jian.

145
00:10:34,780 --> 00:10:38,420
Let's try it again with, let's say German.

146
00:10:38,420 --> 00:10:44,820
So we'll say German, speak German, guten tag, and tschuess.

147
00:10:44,820 --> 00:10:52,900
Okay, just to test that it works with English too, let's try English, hello, goodbye.

148
00:10:52,900 --> 00:10:55,660
Okay, just one more thing I'd like to show you.

149
00:10:56,500 --> 00:11:00,980
So if you want to change your representation of a list of lists from a table like this

150
00:11:00,980 --> 00:11:09,660
one into an actual list of lists representation, you can click on this and say list view, and

151
00:11:09,660 --> 00:11:12,460
then your view will look like this.

152
00:11:12,460 --> 00:11:15,940
You'll see that it's actually composed now of a list of lists.

153
00:11:15,940 --> 00:11:18,780
You see the three lists within another list.

154
00:11:18,780 --> 00:11:25,580
Most people prefer to see it as a table, but when you get multiply embedded lists, multidimensional

155
00:11:25,580 --> 00:11:30,860
lists, three or four dimensions, then you'll need to look at that list of lists view.

156
00:11:30,860 --> 00:11:35,100
The tricky thing when retrieving items from lists of lists is that you work from the outermost

157
00:11:35,100 --> 00:11:40,500
list towards the innermost list, but your item of list block winds up getting stacked

158
00:11:40,500 --> 00:11:41,700
in reverse order.

159
00:11:41,700 --> 00:11:45,540
So the outermost block will give you the result from the innermost list, and so you kind of

160
00:11:45,540 --> 00:11:48,100
need to think backwards from the inside out.

161
00:11:48,100 --> 00:11:51,980
It's actually not different from any other stack of blocks and nets blocks which give

162
00:11:51,980 --> 00:11:55,740
you values that you can then compute in other expressions.

163
00:11:55,740 --> 00:11:59,740
And don't worry if you get mixed up from time to time about what list you're working with.

164
00:11:59,740 --> 00:12:01,480
So do professional programmers.

165
00:12:01,480 --> 00:12:05,860
Just try varying that index of, and you'll see eventually you'll get to the right item

166
00:12:05,860 --> 00:12:06,860
in your list.

167
00:12:06,860 --> 00:12:09,780
All right, so let's wrap up this video here.

168
00:12:09,780 --> 00:12:14,580
In this video, you learned how to create two-dimensional lists in nets blocks and to explore those

169
00:12:14,580 --> 00:12:17,720
lists in both tabular and list form.

170
00:12:17,720 --> 00:12:22,520
You also learned how to index into two-dimensional lists to retrieve items of information.

171
00:12:22,520 --> 00:12:28,140
And you built a program that demonstrates the utility of making lists of lists for tasks

172
00:12:28,140 --> 00:12:30,740
like internationalization.

173
00:12:30,740 --> 00:12:36,620
In the next video, we'll experiment with the call block to make lists and tables.

174
00:12:36,620 --> 00:12:37,660
See you in the next video.

